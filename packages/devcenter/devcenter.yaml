# DevCenter is hosted on an S3 bucket. CloudFront uses it as an origin,
# adding HTTP caching heads using Lambda @ Edge Origin Response.
#
#
# This stack must be deployed in `us-east-1` as it contains global resources.
---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: mobify-devcenter

Parameters:
    Environment:
        Type: String
        Default: staging
        AllowedPattern: '[a-z][-a-z0-9]+'

Conditions:
    IsProduction: !Equals [!Ref Environment, production]

Resources:
    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub mobify-devcenter-${AWS::AccountId}
            AccessControl: Private
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: 404.html
            Tags:
                # Required to handle P0 policy violation: "AWS S3 Bucket Public 'READ' Access"
                - Key: p_confidentiality
                  Value: Public

    S3BucketWriteIAMPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: !Sub mobify-devcenter-${Environment}
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:GetBucketLocation
                          - s3:ListAllMyBuckets
                      Resource:
                          - arn:aws:s3:::*
                    - Effect: Allow
                      Action:
                          - s3:*
                      Resource:
                          - !Sub arn:aws:s3:::${S3Bucket}
                          - !Sub arn:aws:s3:::${S3Bucket}/*

    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Aliases:
                    - !If [IsProduction, dev.mobify.com, dev.mobify-staging.com]
                    - !If [IsProduction, docs.mobify.com, docs.mobify-staging.com]
                Origins:
                    - Id: devcenter
                      DomainName: !Sub ${S3Bucket}.s3-website-us-east-1.amazonaws.com
                      CustomOriginConfig:
                          # S3 website configuration does not support HTTPS connections:
                          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-s3-origin.html
                          OriginProtocolPolicy: http-only
                DefaultCacheBehavior:
                    TargetOriginId: devcenter
                    ViewerProtocolPolicy: redirect-to-https
                    ForwardedValues:
                        QueryString: false
                    DefaultTTL: 300
                    Compress: true
                    LambdaFunctionAssociations:
                        - EventType: origin-response
                          LambdaFunctionARN: !Ref OriginResponseLambda.Version
                        - EventType: viewer-request
                          LambdaFunctionARN: !Ref ViewerRequestLambda.Version
                PriceClass: PriceClass_100
                Enabled: true
                HttpVersion: http2
                ViewerCertificate:
                    AcmCertificateArn:
                        !If [
                            IsProduction,
                            arn:aws:acm:us-east-1:120963225130:certificate/37ca3ba8-c6aa-4946-b00e-71b817d446f1,
                            arn:aws:acm:us-east-1:766791126171:certificate/57007ad9-af3d-4f67-a199-4f2ba224a344,
                        ]
                    SslSupportMethod: sni-only

    CdnDns:
        Type: AWS::Route53::RecordSet
        Properties:
            Name: !If [IsProduction, dev.mobify.com, dev.mobify-staging.com]
            Type: CNAME
            HostedZoneId: !If [IsProduction, Z049604136MJ1KWZMAYXF, Z00429581ZFAEVBCIAQZ8]
            ResourceRecords:
                - !GetAtt CloudFrontDistribution.DomainName
            TTL: 300

    DocsDns:
        Type: AWS::Route53::RecordSet
        Properties:
            Name: !If [IsProduction, docs.mobify.com, docs.mobify-staging.com]
            Type: CNAME
            HostedZoneId: !If [IsProduction, Z049604136MJ1KWZMAYXF, Z00429581ZFAEVBCIAQZ8]
            ResourceRecords:
                - !GetAtt CloudFrontDistribution.DomainName
            TTL: 300

    LambdasExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                              - edgelambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: '/'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/PCSKPermissionsBoundary'

    OriginResponseLambda:
        Type: AWS::Serverless::Function
        Properties:
            Role: !GetAtt LambdasExecutionRole.Arn
            Runtime: 'nodejs12.x'
            Handler: index.handler
            Timeout: 3
            PackageType: Zip
            InlineCode: |
                exports.handler = (event, context, callback) => {
                    const {response} = event.Records[0].cf;
                    const {headers} = response;
                    if (response.status === '200' && !headers['cache-control']) {
                        headers['cache-control'] = [
                            {
                                key: 'cache-control',
                                value: `public, max-age=${60 * 5}`
                            }
                        ];
                    }

                    return callback(null, response);
                };
            AutoPublishAlias: live

    ViewerRequestLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt LambdasExecutionRole.Arn
            Runtime: 'nodejs12.x'
            Timeout: 3
            PackageType: Zip
            InlineCode: |
                exports.handler = (event, context, callback) => {
                    const request = event.Records[0].cf.request;
                    const host = request.headers['host'][0].value;
                    const hostDomainArray = host.split('.');
                    const hostSubDomain = hostDomainArray[0];
                    const hostDomain = hostDomainArray[1] + '.' + hostDomainArray[2];

                    if (hostSubDomain !== 'docs') {
                        callback(null, request);
                        return;
                    }

                    const redirectResponse = {
                        status: '302',
                        statusDescription: 'Found',
                        headers: {
                            location: [{
                                key: 'Location',
                                value: `https://dev.${hostDomain}/v1.x/`,
                            }],
                        },
                    };

                    callback(null, redirectResponse);
                };
            AutoPublishAlias: live

Outputs:
    CloudFrontDistributionId:
        Value: !Ref CloudFrontDistribution
    CloudFrontDistributionDomain:
        Value: !GetAtt CloudFrontDistribution.DomainName
