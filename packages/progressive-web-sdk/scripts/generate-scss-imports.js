/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2019 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-env node */
/* eslint-disable import/no-commonjs */

'use strict'

const Promise = require('bluebird')

const fs = Promise.promisifyAll(require('fs'))
const path = require('path')

const common = require('./common')
const fileUtils = require('./file-utils')
const consoleOutput = require('./console-output')

const filterStylesheets = fileUtils.filterFiles((dir) => {
    return common.component(path.join(dir, '_base.scss'))
})

const pathsFromDirs = (dirs) =>
    dirs.map((dir) => {
        // The paths generated by this function will be used by scss files as their
        // import paths. Scss files expect the import paths to be in POSIX format.
        // So, we will not use path.resolve to resolve these paths based on OS rather
        // use POSIX paths directly.
        if (fileUtils.existsSync(common.component(path.join(dir, '_theme.scss')))) {
            return {
                basePath: `../src/components/${dir}/_base.scss`,
                themePath: `../src/components/${dir}/_theme.scss`
            }
        } else {
            return {
                basePath: `../src/components/${dir}/_base.scss`
            }
        }
    })

const getComponents = () => {
    return fs
        .readdirAsync(common.APP_COMPONENT_DIR)
        .then(fileUtils.filterDirectories(common.component))
        .then(filterStylesheets)
        .then(pathsFromDirs)
}

const generateScssImports = () => {
    return Promise.resolve()
        .then(common.step('Finding component directories', getComponents))
        .then(
            common.step('Generating component list CSS program text\n', (components) =>
                common.transformFile(
                    'generated.template.scss',
                    {components},
                    path.join('styleguide', 'styles', '_components.scss')
                )
            )
        )
}

module.exports = generateScssImports

// run the code if we're called from the command line
if (require.main === module) {
    generateScssImports().then(() => consoleOutput.greenWrite('Finished successfully\n'))
}
