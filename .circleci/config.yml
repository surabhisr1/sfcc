version: 2.1
orbs:
  slack: circleci/slack@3.2.0

commands:
  setup:
    description: 'Setup Machine'
    steps:
      - restore_cache:
          keys:
            - npm-cache
      - run:
          name: 'Set environment variables'
          command: |
            touch $BASH_ENV
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then echo 'export MASTER=true' >> $BASH_ENV; fi
            if [[ "${CIRCLE_BRANCH}" == "develop" ]]; then echo 'export DEVELOP=true' >> $BASH_ENV; fi
            if [[ "${CIRCLE_BRANCH}" =~ ^release- ]]; then echo 'export RELEASE=true' >> $BASH_ENV; fi
            source $BASH_ENV

      - run:
          name: 'Install Dependencies'
          command: |
            # Add Chrome to apt sources
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'

            # Install system dependencies
            sudo apt-get update
            sudo apt-get install python-dev python-pip google-chrome-stable time
            sudo pip install awscli==1.18.85 datadog==0.36.0
            sudo npm install -g npm@6.14.4

            # Add a dogrc so we can submit metrics to datadog
            printf "[Connection]\napikey = $DATADOG_API_KEY\nappkey =\n" > ~/.dogrc

            # Add NPM token to allow publishing from Circle
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            # Install node dependencies
            node ./scripts/gtime.js monorepo_install npm ci

            # Build the PWA
            npm run lerna -- run analyze-build --scope "scaffold-pwa"

            # Report bundle sizes
            node ./scripts/report-bundle-size.js

            # Build docs
            npm run lerna -- run docs

            # Add credentials file at ~/.mobify so we can upload to Mobify Cloud
            npm run save-credentials --prefix packages/pwa -- --user "${MOBIFY_CLIENT_USER}" --key "${MOBIFY_CLIENT_API_KEY}"
      - save_cache:
          key: npm-cache
          paths:
            - /root/.npm

  runtests:
    description: 'Run tests'
    parameters:
      cwd:
        description: 'The directory to execute the tests from'
        default: ${PWD}
        type: string
    steps:
      - run:
          name: 'Run tests'
          command: |
            cd << parameters.cwd >>

            # Ensure bundlesize is in check
            npm run test:max-file-size

            # Always run fast unit tests
            npm run test

            # End to end tests
            # npm run test:e2e-ci

            # Only run expensive integration tests on these branches
            if [[ $MASTER || $DEVELOP || $RELEASE ]]; then
              npm run test:integration
            fi
  countdependencies:
    description: 'Count package.json dependencies'
    steps:
      - run:
          name: Count package.json dependencies
          command: |
              # Quick and dirty check of number of dependencies. We want to
              # start bringing these down - many are duplicated.
              MAX_PACKAGES="390"

              uniques=$(ls ./package.json ./packages/*/package.json | xargs -I _ -n 1 \
                  node -e "const p = require('_'); console.log(Object.keys(p.dependencies || {}).join('\n')); console.log(Object.keys(p.devDependencies || {}).join('\n'))" \
                  | sort | uniq | wc -l | xargs)

              total=$(ls ./package.json ./packages/*/package.json | xargs -I _ -n 1 \
                  node -e "const p = require('_'); console.log(Object.keys(p.dependencies || {}).join('\n')); console.log(Object.keys(p.devDependencies || {}).join('\n'))" \
                  | wc -l | xargs)

              if [ "$total" -gt "$MAX_PACKAGES" ]; then
                  echo "Error: Found $total installed packages (max $MAX_PACKAGES, uniques $uniques).";
                  exit 1;
              else
                  echo "Found $total installed packages (max $MAX_PACKAGES, uniques $uniques).";
              fi

              dog metric post mobify_platform_sdks.monorepo_total_packages $total
              dog metric post mobify_platform_sdks.monorepo_unique_packages $uniques
  runaudits:
    description: 'Run NPM Audits'
    steps:
      - run:
          name: Run NPM Audits
          command: |
              set +e
              results=$(node ./scripts/audit.js --max-critical 0 --max-high=25)
              exitCode=$?
              set -e

              echo "$results"
              echo "$results" | awk '{ print "mobify_platform_sdks.vulnerabilities_"$1 " "$2 }' | xargs -n2 bash -c 'dog metric post "$1" $2' bash

              exit $exitCode
  checkclean:
    description: 'Check Repository Clean'
    steps:
      - run:
          name: Check Repository Clean
          command: |
              # Print status for debugging on CircleCI.
              git status
              # Fail the build if any step leaves uncommitted changes in the repo
              # that would prevent Lerna from publishing (Lerna gets this right).
              git diff --exit-code

jobs:
  testNode10:
    docker:
      - image: circleci/node:10-stretch-browsers
    steps:
      - checkout
      - setup
      - countdependencies
      - runaudits
      - runtests
      - checkclean
      - store_test_results:
          path: packages/pwa/tests/reports
          when: always
      - store_artifacts:
          path: packages/pwa/tests/screenshots
          when: always
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

  testNode12:
    docker:
      - image: circleci/node:12-stretch-browsers
    steps:
      - checkout
      - setup
      - countdependencies
      - runaudits
      - runtests
      - run:
          name: Publish Docs
          command: |
              if [[ $DEVELOP || $RELEASE ]]; then
                target=staging
              elif [[ $MASTER ]]; then
                target=production
              else
                target=""
              fi

              if [[ $target ]]; then
                npm run lerna -- run deployDocs -- $target
              fi
      - run:
          name: Push Bundle
          command: |
              if [[ $DEVELOP || $RELEASE ]]; then
                target=staging
              elif [[ $MASTER ]]; then
                target=production
              else
                target=""
              fi

              if [[ $target ]]; then
                npm run push --prefix packages/pwa -- --message "build ${CIRCLE_BUILD_NUM} on ${CIRCLE_BRANCH} (${CIRCLE_SHA1})" --target $target
              fi

      - checkclean
      - run:
          name: Publish to NPM
          command: |
              if [[ $MASTER || $RELEASE ]]; then
                # Publish all changed packages. The "from-package" arg means "look
                # at the version numbers in each package.json file and if that doesn't
                # exist on NPM, publish"
                npm run lerna -- publish from-package --yes
              fi
      - store_test_results:
          path: packages/pwa/tests/reports
          when: always
      - store_artifacts:
          path: packages/pwa/tests/screenshots
          when: always
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

  generatedProjectTest:
    docker:
      - image: circleci/node:10-stretch-browsers
    steps:
      - checkout
      - setup
      - run:
          name: Generate project
          command: |
            # Generate project
            cd packages/generator
            node scripts/mobify-generator.js --preset test-project-bundled --outputDir /tmp/project
            # Save path to generated project
            cd /tmp/project

            # Install packages
            node ./scripts/gtime.js generated_project_install npm ci

            # Build the PWA
            npm run lerna -- run prod:build --scope "project-blah-web"
      - runtests:
          cwd: /tmp/project
      - run:
          name: Remove generated project
          command: |
              rm -rf /tmp/project
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

workflows:
  version: 2
  test:
    jobs:
      - testNode10
      - testNode12
      - generatedProjectTest
